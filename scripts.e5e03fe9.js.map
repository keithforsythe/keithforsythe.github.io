{"version":3,"sources":["js/scripts.js"],"names":["init","appStateToggle","document","querySelector","mobileAppStateToggle","appState","modalWindow","querySelectorAll","modalWindowLauncher","modalWindowClose","appReset","i","setAttribute","length","classList","remove","addEventListener","getAttribute","clickedData","dataset","sample","toggle","images","src","event","currentTarget","parentElement","lazyImages","slice","call","window","lazyImageObserver","IntersectionObserver","entries","observer","forEach","entry","isIntersecting","lazyImage","target","srcset","unobserve","observe"],"mappings":";AAAA,SAASA,IACCC,IAAAA,EAAiBC,SAASC,cAAc,uBACxCC,EAAuBF,SAASC,cAAc,wBAC9CE,EAAWH,SAASC,cAAc,QAClCG,EAAcJ,SAASK,iBAAiB,oBACxCC,EAAsBN,SAASK,iBAAiB,oBAChDE,EAAmBP,SAASK,iBAAiB,mBAE1CG,SAAAA,IAGDC,IAFJN,EAASO,aAAa,iBAAkB,YACxCP,EAASO,aAAa,mBAAoB,YACtCD,EAAE,EAAGA,EAAIL,EAAYO,OAAQF,IAC7BL,EAAYK,GAAGG,UAAUC,OAAO,aAIxCd,EAAee,iBAAiB,QAAS,WAEf,YADAX,EAASY,aAAa,kBAExCZ,EAASO,aAAa,iBAAkB,UAExCF,MAIRN,EAAqBY,iBAAiB,QAAS,WAC3CN,MAGC,IAAA,IAAIC,EAAI,EAAGA,EAAIH,EAAoBK,OAAQF,IAC5CH,EAAoBG,GAAGK,iBAAiB,QAAS,WACzCE,IAAAA,EAAc,KAAKC,QAAQC,OACblB,SAASC,cAAgCe,iBAAAA,OAAAA,EAA3D,OACYJ,UAAUO,OAAO,aAIzB,IAHAC,IAAAA,EAASpB,SAASK,iBAAiB,wBAG/BI,EAAI,EAAGA,EAAIW,EAAOT,OAAQF,IAC9BW,EAAOX,GAAGY,IAAMD,EAAOX,GAAGM,aAAa,YAEvCZ,EAASO,aAAa,mBAAoB,YAIjD,IAAID,EAAI,EAAGA,EAAIF,EAAiBI,OAAQF,IACzCF,EAAiBE,GAAGK,iBAAiB,QAAS,WACjBQ,MAAMC,cACdC,cAAcZ,UAAUC,OAAO,aAChDV,EAASO,aAAa,mBAAoB,YAGtC,IADAU,IAAAA,EAASpB,SAASK,iBAAiB,cAC/BI,EAAI,EAAGA,EAAIW,EAAOT,OAAQF,IAC9BW,EAAOX,GAAGY,IAAM,KAKhCvB,IAEAE,SAASc,iBAAiB,mBAAoB,WACtCW,IAAAA,EAAa,GAAGC,MAAMC,KAAK3B,SAASK,iBAAiB,aAErD,GAAA,yBAA0BuB,OAAQ,CAChCC,IAAAA,EAAoB,IAAIC,qBAAqB,SAASC,EAASC,GACjED,EAAQE,QAAQ,SAASC,GACnBA,GAAAA,EAAMC,eAAgB,CACpBC,IAAAA,EAAYF,EAAMG,OACtBD,EAAUf,IAAMe,EAAUnB,QAAQI,IAClCe,EAAUE,OAASF,EAAUnB,QAAQqB,OACrCF,EAAUxB,UAAUC,OAAO,QAC3BgB,EAAkBU,UAAUH,QAKlCX,EAAWQ,QAAQ,SAASG,GAC1BP,EAAkBW,QAAQJ","file":"scripts.e5e03fe9.js","sourceRoot":"..","sourcesContent":["function init() {\n    const appStateToggle = document.querySelector('.js-appstate-toggle');\n    const mobileAppStateToggle = document.querySelector('.js-mobileapp-toggle');\n    const appState = document.querySelector(\"#app\");\n    const modalWindow = document.querySelectorAll('.js-modal-window');\n    const modalWindowLauncher = document.querySelectorAll('.js-modal-toggle');\n    const modalWindowClose = document.querySelectorAll('.js-modal-close');\n    //Helper Functions\n    function appReset(){\n        appState.setAttribute('data-app-state', 'sleeping');\n        appState.setAttribute('data-modal-state', \"inactive\");\n        for(i=0; i < modalWindow.length; i++){\n            modalWindow[i].classList.remove('is-active');\n        }\n    }\n    //App State Toggle Button on Tablet and Deasktop\n    appStateToggle.addEventListener('click', function(){\n        var currentAppState = appState.getAttribute('data-app-state');\n        if(currentAppState == \"sleeping\") {\n            appState.setAttribute('data-app-state', 'active');\n        } else {\n            appReset();\n        }\n    });\n    //App State Close Button on Mobile Phones\n    mobileAppStateToggle.addEventListener('click', function(){\n        appReset();\n    });\n    //Sample Modal Window Launcher\n    for (var i = 0; i < modalWindowLauncher.length; i++) {\n        modalWindowLauncher[i].addEventListener('click', function() {\n            var clickedData = this.dataset.sample;\n            var modalViewed = document.querySelector(`[data-window=\"${ clickedData }\"]`);\n            modalViewed.classList.toggle('is-active');\n            var images = document.querySelectorAll(\".modal.is-active img\");\n            \n            //Load img source only when user clicks sample modal toggle\n            for(var i = 0; i < images.length; i++) {\n                images[i].src = images[i].getAttribute('data-src');\n            }\n                appState.setAttribute('data-modal-state', 'active');\n            }); \n    }\n    //Sample Modal Window Close Button\n    for (var i = 0; i < modalWindowClose.length; i++) {\n        modalWindowClose[i].addEventListener('click', function(){\n            const modalCloseButton = event.currentTarget;\n            modalCloseButton.parentElement.classList.remove('is-active');\n            appState.setAttribute('data-modal-state', 'inactive');\n\n            var images = document.querySelectorAll(\".modal img\");\n            for(var i = 0; i < images.length; i++) {\n                images[i].src = \"\";\n            }\n        });\n    }\n}\ninit();\n\ndocument.addEventListener(\"DOMContentLoaded\", function() {\n    var lazyImages = [].slice.call(document.querySelectorAll(\"img.lazy\"));\n  \n    if (\"IntersectionObserver\" in window) {\n      let lazyImageObserver = new IntersectionObserver(function(entries, observer) {\n        entries.forEach(function(entry) {\n          if (entry.isIntersecting) {\n            let lazyImage = entry.target;\n            lazyImage.src = lazyImage.dataset.src;\n            lazyImage.srcset = lazyImage.dataset.srcset;\n            lazyImage.classList.remove(\"lazy\");\n            lazyImageObserver.unobserve(lazyImage);\n          }\n        });\n      });\n  \n      lazyImages.forEach(function(lazyImage) {\n        lazyImageObserver.observe(lazyImage);\n      });\n    } else {\n      // Possibly fall back to a more compatible method here\n    }\n  });"]}